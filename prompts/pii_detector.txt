다음 문장에서 아래 항목들에 해당하는 개인정보를 모두 찾아서 JSON의 형태로 반환해줘.

감지해야 할 항목:
- 이름 → name
- 전화번호 → phone
- 주민등록번호 → rrn
- 이메일 → email
- 주소 → address

출력 형식 (JSON):
{{
    "name": ["이름", ...],
    "phone": ["전화번호", ...],
    "rrn": ["주민등록번호", ...],
    "email": ["이메일", ...],
    "address": ["주소", ...]
}}

* 주의:
- 개인정보가 포함되지 않은 항목은 생략하지 말고 []로 채워줘.
- JSON 외의 설명 없이 순수 JSON만 출력해줘.
- 하나의 문장에 여러 개인정보가 포함될 수 있음.
- 형식이 틀린 데이터를 억지로 넣으면 작업 실패로 간주함

* 항목별 식별 기준:
- 전화번호 (phone):
  - 010-XXXX-XXXX (휴대전화)
  - 02/031/032 등의 지역번호 포함: 02-123-4567, 031-234-5678
  - 1577, 1588 등 대표번호 포함: 1577-1234, 1588-5678
  - 070, 011, 016 등도 포함될 수 있음
  - 보통 "-"로 구분되며 다른 특수문자로 구분하기도 함, 숫자만 있는 경우도 있음
  - 아래는 다양한 전화번호 표현의 예시
    - 010 1234 1234
    - 02)1234-1234
    - 031-123-1234
    - (070)1234-1234
    - 01112345678
    - 016.1234.1234

- 주민등록번호 (rrn):
  - 반드시 정확히 "YYMMDD-SXXXXXX" 형식의 13자리 숫자만 인식해야 함 (예: 900101-1234567)
  - 앞 6자리는 생년월일(YYMMDD), 하이픈(-) 다음 7자리는 숫자
  - S는 성별을 나타내며 1, 2, 3, 4 중 하나여야 함
  - 숫자 개수가 13이 아니면 **절대 rrn으로 인식하지 말 것**

- 이메일 (email):
  - example@domain.com 형식의 주소
  - 알파벳, 숫자, 하이픈(-), 언더바(_), 점(.) 등을 포함 가능
  - 형식이 틀린 데이터를 억지로 넣으면 작업 실패로 간주함

- 이름 (name):
  - 일반적으로 한글 2~4자 (예: 김철수, 박영희 등)
  - 앞 뒤 문맥을 파악해서 이름으로 판단해야 함
  - 앞이나 뒤에 직급이나 직함, 직업, 역할이 붙을 경우 이름일 가능성이 높음 (예: 김철수 대표, 사원 박영희, 송인걸 박사, 백엔드팀 엄준식, 김찬호 학생, 손인욱 교수)
  - 이름 사이에 공백이 있을 수도 있음. 단, 이 경우 공백을 제외하지 말것
  - 서식이 있는 문서의 경우 이름 앞에 "성함", "성명" 등의 단어가 붙을 수 있음

- 주소 (address):
  - ‘시’, ‘도’, ‘구’, ‘군’, ‘동’, ‘읍’, ‘면’, ‘리’, ‘로’, ‘길’, ‘아파트’, ‘빌라’, ‘단지’, ‘번지’ 등이 포함된 지명 또는 장소
  - 우편번호가 포함될 수도 있음
  - 예: 서울특별시 강남구 역삼동 테헤란로 123
  - 형식이 틀린 데이터를 억지로 넣으면 작업 실패로 간주함

문장:
{text}
